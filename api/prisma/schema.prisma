//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// datasource.prisma
//

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// generator.prisma
//

generator client {
  provider = "prisma-client-js"
}

//
// account.prisma
//

model Account {
  id String @id @default(uuid())

  first_name String
  last_name  String
  username   String  @unique
  email      String? @unique
  password   String

  verified_at DateTime?
  deleted_at  DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  positions       AssetPosition[] @relation("asset_position_account")
  favorite_assets AssetFavorite[] @relation("asset_favorite_account")
  transactions    Transaction[]   @relation("transaction_account")

  @@index([username, email])
  @@map("account")
}

//
// asset_favorite.prisma
//

model AssetFavorite {
  id String @id @default(uuid())

  asset_id String
  user_id  String

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user  Account @relation("asset_favorite_account", fields: [user_id], references: [id])
  asset Asset   @relation("asset_favorite_asset", fields: [asset_id], references: [id])

  @@unique([asset_id, user_id])
  @@map("asset_favorite")
}

//
// asset_position.prisma
//

model AssetPosition {
  id String @id @default(uuid())

  asset_id String
  user_id  String

  leverage       Int
  direction      EDirection @default(LONG)
  open_position  Float
  close_position Float?
  profit         Float?

  status EPositionStatus @default(OPEN)

  in_tx_id  String?
  out_tx_id String?

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user   Account      @relation("asset_position_account", fields: [user_id], references: [id])
  asset  Asset        @relation("asset_position_asset", fields: [asset_id], references: [id])
  in_tx  Transaction? @relation("asset_position_in_tx", fields: [in_tx_id], references: [id])
  out_tx Transaction? @relation("asset_position_out_tx", fields: [out_tx_id], references: [id])

  @@index([asset_id, user_id])
  @@map("asset_position")
}

//
// asset.prisma
//

model Asset {
  id String @id @default(uuid())

  name     String
  symbol   String
  decimals Int    @default(18)

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  favorites    AssetFavorite[] @relation("asset_favorite_asset")
  positions    AssetPosition[] @relation("asset_position_asset")
  transactions Transaction[]   @relation("transaction_asset")

  @@map("asset")
}

//
// base.prisma
//

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//
// enum.prisma
//

enum EDirection {
  LONG
  SHORT
}

enum EPositionStatus {
  OPEN
  CLOSE
}

//
// transaction.prisma
//

model Transaction {
  id String @id @default(uuid())

  asset_id    String
  user_id     String
  type        String
  description String?
  in          BigInt
  out         BigInt

  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  asset        Asset           @relation("transaction_asset", fields: [asset_id], references: [id])
  user         Account         @relation("transaction_account", fields: [user_id], references: [id])
  in_position  AssetPosition[] @relation("asset_position_in_tx")
  out_position AssetPosition[] @relation("asset_position_out_tx")

  @@map("transaction")
}
